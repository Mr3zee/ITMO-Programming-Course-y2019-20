(defn doV [f] #(apply mapv f %&))
(def v+ (doV +))
(def v- (doV -))
(def v* (doV *))
(defn scalar [& args] (apply + (apply v* args)))
(defn v*s [vec & args] (mapv #(* (apply * args) %1) vec))
(defn det2 [a b i1 i2] (- (* (nth a i1) (nth b i2)) (* (nth b i1) (nth a i2))))
(defn vect [& args] (reduce #(vector (det2 %1 %2 1 2) (- (det2 %1 %2 0 2)) (det2 %1 %2 0 1)) args))